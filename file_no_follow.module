<?php

use Drupal\file\Entity\File;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;

/**
 * @file
 * Contains file_no_follow.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function file_no_follow_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the file_no_follow module.
    case 'help.page.file_no_follow':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Allow increase funcionality to file field type.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_field_info_alter().
 */
function file_no_follow_field_info_alter(&$info) {
  if (isset($info['file'])) {
    $info['file']['class'] = '\Drupal\file_no_follow\Plugin\Field\FieldType\FileNoFollowFieldType';
  }
}

/**
 * Implements hook_theme().
 */
function file_no_follow_theme() {
  return array(
    'file_link_no_follow' => [
      'variables' => [
        'file' => NULL,
        'description' => NULL,
        'attributes' => [],
        'options' => [],
      ],
    ],
  );
}

/**
 * Prepares variables for file link templates.
 *
 * Default template: file-link-no-follow.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - file: A file object to which the link will be created.
 *   - icon_directory: (optional) A path to a directory of icons to be used for
 *     files. Defaults to the value of the "icon.directory" variable.
 *   - description: A description to be displayed instead of the filename.
 *   - options: The options for render to link.
 *   - attributes: An associative array of attributes to be placed in the a tag.
 */
function  template_preprocess_file_link_no_follow(&$variables) {

  $file = $variables['file'];
  $options = array();
  // Get the variables options.
  if (isset($variables['options'])) {
    foreach ($variables['options'] as $key => $value) {
      $options['attributes'][$key] = $value;
    }
  }
  $file_entity = $file instanceof File ? $file : File::load($file->fid);

  $url = file_create_url($file_entity->getFileUri());
  $variables['#cache']['contexts'][] = 'url.site';
  $mime_type = $file
    ->getMimeType();

  // Set options as per anchor format described at
  // http://microformats.org/wiki/file-format-examples
  $options['attributes']['type'] = $mime_type . '; length=' . $file
    ->getSize();

  // Use the description as the link text if available.
  if (empty($variables['description'])) {
    $link_text = $file_entity
      ->getFilename();
  }
  else {
    $link_text = $variables['description'];
    $options['attributes']['title'] = $file_entity
      ->getFilename();
  }

  // Classes to add to the file field for icons.
  $classes = array(
    'file',
    // Add a specific class for each and every mime type.
    'file--mime-' . strtr($mime_type, array(
      '/' => '-',
      '.' => '-',
    )),
    // Add a more general class for groups of well known MIME types.
    'file--' . file_icon_class($mime_type),
  );

  // Set file classes to the options array.
  $variables['attributes'] = new Attribute($variables['attributes']);
  $variables['attributes']
    ->addClass($classes);
  $variables['link'] = \Drupal::l($link_text, Url::fromUri($url, $options));
}
